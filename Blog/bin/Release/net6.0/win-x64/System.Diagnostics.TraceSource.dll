ame="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_SynchronizePropertyFacets">
      <summary>「プロパティ ファセットの更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_ToRole">
      <summary>「To ロール」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_Type">
      <summary>「型」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_Unicode">
      <summary>「Unicode」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_UseLegacyProvider">
      <summary>「レガシ プロバイダーの試用」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_UseStrongSpatialTypes">
      <summary>「厳密な空間型の使用」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_DisplayName_ValidateOnBuild">
      <summary>「ビルド時に検証」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_MessageBox_SetAbstract">
      <summary>「エンティティ型を抽象として定義すると、そのエンティティ型に対する既存の関数マッピングがすべて削除されます。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityMany">
      <summary>「* (多)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityManyOf">
      <summary>「* ({0} のコレクション)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityOne">
      <summary>「1 (1)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityOneOf">
      <summary>「1 ({0} の 1)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityZeroOrOne">
      <summary>「0..1 (0 または 1)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.PropertyWindow_Value_MultiplicityZeroOrOneOf">
      <summary>「0..1 ({0} の 0 または 1)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorPreviewGroupName">
      <summary>「コード オブジェクト」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRename_InvalidName">
      <summary>「指定した名前には有効な識別子がありません。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRename_UndoDescription">
      <summary>「{0} から {1} への名前の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_Cancel">
      <summary>「キャンセル」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_LocationLabel">
      <summary>「場所:」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_NewNameLabel">
      <summary>「新しい名前:」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_OK">
      <summary>「OK」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_PreviewReferenceChangesLabel">
      <summary>「参照の変更のプレビュー」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameDialog_Title">
      <summary>「名前の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameOperation_ConfirmButtonText">
      <summary>「適用」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameOperation_Description">
      <summary>「名前の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameOperation_TextViewDescription">
      <summary>「変更のプレビュー:」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefactorRenameOperation_Title">
      <summary>「変更のプレビュー - 名前の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefConstraintDialog_ErrorInRCDependentProperty">
      <summary>「{0} (エラー: 見つかりません))」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RefConstraintDialog_ErrorInRCPrincipalProperty">
      <summary>「{0} (エラー: 見つかりません。参照が削除されます)」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RenameModelMessageBox_Text">
      <summary>「ファイル名の変更やファイルの移動を行うことはできません。ファイル名の変更やファイルの移動を行う前に、Entity Designer でファイルを閉じてください。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.ResourceManager">
      <summary>このクラスで使用される、キャッシュされた ResourceManager インスタンスに戻ります。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RetrievingSprocReturnTypeErrorMessage">
      <summary>「ストアド プロシージャまたは関数の戻り値の型情報を取得できませんでした。エラー メッセージ {0}」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RetrievingSprocReturnTypeInfoMessage">
      <summary>「ストアド プロシージャまたは関数の戻り値の型情報を取得しています {0}/{1} - '{2}.{3}'」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RetrievingSprocReturnTypeProgressDialogDescription">
      <summary>「ストアド プロシージャまたは関数の戻り値の型情報を取得しています」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RetrievingSprocReturnTypeProgressDialogInitialStatus">
      <summary>「データベース接続を待機しています...」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RetrievingSprocReturnTypeProgressDialogTitle">
      <summary>「お待ちください...」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RuntimeValidationException_FailureToLoadStoreItemCollection">
      <summary>「StoreItemCollection を作成しようとしているときに次の例外が発生しました: '{0}'」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.RuntimeValidationException_StoreItemCollectionMayRequireDatabaseConnection">
      <summary>「StoreItemCollection をプロバイダー ファクトリから読み込むことができません。StoreItemCollection を読み込むには、データベース接続を開くことが必要になる場合があります。例外メッセージ: '{0}'。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.SearchResultItemsMatching">
      <summary>「{0} に一致する項目」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.SearchResultSearchCriteria">
      <summary>「'{0}'」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.StorageAssociationsGhostNodeName">
      <summary>「制約」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.StorageFunctionsGhostNodeName">
      <summary>「ストアド プロシージャ/関数」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.StorageTypesGhostNodeName">
      <summary>「テーブル/ビュー」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.T4_ItemTemplate_CSharp_Comment">
      <summary>次に類似したローカライズされた文字列を取得します: 「T4 項目テンプレートの CSharp のコメント」。</summary>
      <returns>次に類似したローカライズされた文字列: 「T4 項目テンプレートの CSharp のコメント」。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.TemplateError">
      <summary>「行 {0}、列 {1}: '{2}'」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.TemplateErrorsEncountered">
      <summary>「テンプレート '{0}' の処理中に次のエラーが発生しました: {1}」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.ToolWindowTitle">
      <summary>「モデル ブラウザー」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.TransactionAlreadyCompleted">
      <summary>「トランザクションは既に完了しています。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_AddComplexType">
      <summary>「複合型の追加」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeConditionColumn">
      <summary>「条件列の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeConditionValue">
      <summary>「条件値の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeFuncImpMapping">
      <summary>「関数インポート マッピングの変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeFuncImpRetType">
      <summary>「FunctionImport の戻り値の型の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeMetadataArtifactProcessing">
      <summary>「メタデータ成果物の処理の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeResultBinding">
      <summary>「ResultBinding の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ChangeScalarProperty">
      <summary>「ScalarProperty の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateAssociationSetMapping">
      <summary>「AssociationSetMapping の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateCondition">
      <summary>「Condition の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateDiagram">
      <summary>「ダイアグラムの作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateEnumType">
      <summary>「列挙型の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateFunctionImport">
      <summary>「FunctionImport の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateFunctionMapping">
      <summary>「FunctionMapping の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateMappingFragment">
      <summary>「MappingFragment の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateResultBinding">
      <summary>「ResultBinding の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_CreateScalarProperty">
      <summary>「ScalarProperty の作成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteAssociationSetMapping">
      <summary>「AssociationSetMapping の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteCondition">
      <summary>「Condition の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteFunctionMapping">
      <summary>「FunctionMapping の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteMappingFragment">
      <summary>「MappingFragment の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteResultBinding">
      <summary>「ResultBinding の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_DeleteScalarProperty">
      <summary>「ScalarProperty の削除」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_GenerateDatabaseScriptFromModel">
      <summary>「モデルからのデータベース生成」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_LayerDisable">
      <summary>「レイヤー '{0}' を無効にする」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_LayerEnable">
      <summary>「レイヤー '{0}' を有効にする」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_RefactorRenameCommand">
      <summary>「名前の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_ReferentialContraint">
      <summary>「参照に関する制約の変更」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_SetCodeGenerationStrategy">
      <summary>「CodeGeneration 方法の設定」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateAssociationSetMapping">
      <summary>「AssociationSetMapping の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateEnumType">
      <summary>「列挙型の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateFunctionImport">
      <summary>「FunctionImport の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateFunctionMapping">
      <summary>「FunctionMapping の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateMappingFragment">
      <summary>「MappingFragment の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdateModelFromDatabase">
      <summary>「データベースからモデルを更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.Tx_UpdatePropertyType">
      <summary>「プロパティの型の更新」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.UnsupportedProjectLanguage">
      <summary>「サポートされていないプロジェクト言語です。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.UpdateEdmxNamespacesSuccessful">
      <summary>「プロジェクト {0} の .edmx ファイルの storage セクション、conceptual セクション、および mapping セクションの名前空間が、プロジェクトの対象となる .NET Framework に合わせて更新されました。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.UsingDefaultConnectionString_1">
      <summary>「ファイル '{1}' から取得したデータ プロバイダーとデータベース接続 '{0}' を使用しています。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.VsUtils_ErrorResolvingMacro">
      <summary>「マクロ '{0}' を解決できませんでした。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.VSUtils_ExceptionConvertingProject">
      <summary>「階層をプロジェクトに変換しているときに例外が発生しました。階層はプロジェクトではありません。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.VSUtils_ExceptionParsingXml">
      <summary>「ファイル '{0}' を解析中に次の例外が発生しました: '{1}'」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Resources.VSUtils_InnerExceptionErrorFormat">
      <summary>「発生した内部例外の型: '{0}'。エラー メッセージ: '{1}'。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.CascadeDeleteConfiguration">
      <summary>アソシエーションの連鎖削除オプションを設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CascadeDeleteConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.CascadeDeleteConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.CascadeDeleteConfiguration.DeleteBehavior">
      <summary>連鎖削除オプションを取得または設定します。</summary>
      <returns>連鎖削除オプション。</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CascadeDeleteConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper">
      <summary>コードを生成するためのヘルパー メソッドを表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.AnonymousType(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定したプロパティの匿名型ラムダを指定します。</summary>
      <returns>ラムダ。</returns>
      <param name="properties">プロパティ。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Attribute(Microsoft.Data.Entity.Design.CodeGeneration.IAttributeConfiguration)">
      <summary>指定された構成を適用するために使用するデータ注釈属性を返します。</summary>
      <returns>指定された構成を適用するために使用するデータ注釈属性。</returns>
      <param name="configuration">構成。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Attribute(System.String)">
      <summary>指定された本体の属性を返します。</summary>
      <returns>属性。</returns>
      <param name="attributeBody">属性の本体。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.CodeProvider">
      <summary>生成されたコードの言語のプロバイダーを取得します。</summary>
      <returns>生成されたコードの言語のプロバイダー。</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.MethodChain(Microsoft.Data.Entity.Design.CodeGeneration.IFluentConfiguration)">
      <summary>指定された構成を適用するために使用する Code First Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="configuration">構成。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Property(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>指定されたメンバーのプロパティ識別子を指定します。</summary>
      <returns>識別子。</returns>
      <param name="member">メンバー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Property(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>指定されたエンティティ セットのプロパティ識別子を指定します。</summary>
      <returns>識別子。</returns>
      <param name="entitySet">エンティティ セット。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.StringArray(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定された値の文字列配列リテラルを取得します。</summary>
      <returns>リテラル。</returns>
      <param name="values">値。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Type(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>指定されたプロパティの型を指定します。</summary>
      <returns>型。</returns>
      <param name="property">プロパティ。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Type(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>指定された型の型識別子を指定します。</summary>
      <returns>識別子。</returns>
      <param name="edmType">型。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Type(System.Data.Entity.Core.Metadata.Edm.EntityContainer)">
      <summary>指定されたコンテナーの型識別子を指定します。</summary>
      <returns>識別子。</returns>
      <param name="container">コンテナー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper.Type(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>指定されたナビゲーション プロパティの型を指定します。</summary>
      <returns>型。</returns>
      <param name="navigationProperty">ナビゲーション プロパティ。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration">
      <summary>プロパティの列名、型、および順序を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>属性の本体を取得します。</summary>
      <returns>属性の本体。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.Name">
      <summary>列の名前を取得または設定します。</summary>
      <returns>列の名前。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.Order">
      <summary>この列がデータベース テーブルに出現する順序を取得または設定します。</summary>
      <returns>この列がデータベース テーブルに出現する順序。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.ColumnConfiguration.TypeName">
      <summary>データベース プロバイダー固有のデータ型の名前を取得または設定します。</summary>
      <returns>データベース プロバイダー固有のデータ型の名前。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper">
      <summary>C# コードを生成するためのヘルパー メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper.AnonymousType(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定したプロパティの匿名型ラムダを取得します。</summary>
      <returns>ラムダ。</returns>
      <param name="properties">プロパティ。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper.Attribute(System.String)">
      <summary>指定された本体の属性を取得します。</summary>
      <returns>属性。</returns>
      <param name="attributeBody">属性の本体。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper.CodeProvider">
      <summary>C# コードを生成したりコンパイルしたりするために使うコード プロバイダーを取得します。</summary>
      <returns>C# コードを生成したりコンパイルしたりするために使うコード プロバイダー。</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.CSharpCodeHelper.StringArray(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定された値の文字列配列リテラルを取得します。</summary>
      <returns>リテラル。</returns>
      <param name="values">値。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration">
      <summary>データベースによって生成されるプロパティのオプションを設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成に関連付けられている属性の本体を取得します。</summary>
      <returns>構成に関連付けられている属性の本体。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.DatabaseGeneratedConfiguration.StoreGeneratedPattern">
      <summary>データベースでプロパティの値を生成するために使用するパターンを取得または設定します。</summary>
      <returns>データベースでプロパティの値を生成するために使用するパターン。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper">
      <summary>モデルを分析するためのヘルパー メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper.#ctor(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper.GetConfigurations(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したプロパティに適用するモデル構成を取得します。</summary>
      <returns>構成。</returns>
      <param name="property">プロパティ。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper.GetConfigurations(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したエンティティ型に適用するモデル構成を取得します。</summary>
      <returns>構成。</returns>
      <param name="entitySet">エンティティ型のセット。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper.GetConfigurations(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したナビゲーション プロパティに適用するモデル構成を取得します。</summary>
      <returns>構成。</returns>
      <param name="navigationProperty">ナビゲーション プロパティ。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.EdmHelper.GetMultiplicityConfiguration(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Boolean@)">
      <summary>指定したナビゲーション プロパティに適用する複数要素の接続性モデル構成を取得します。</summary>
      <returns>構成。</returns>
      <param name="navigationProperty">ナビゲーション プロパティ。</param>
      <param name="isDefault">既定で構成が適用されるかどうかを示す値。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.FixedLengthConfiguration">
      <summary>文字列またはバイナリ プロパティを固定長としてマークするモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.FixedLengthConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.FixedLengthConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.FixedLengthConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.ForeignKeyConfiguration">
      <summary>アソシエーションの外部キー プロパティを設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.ForeignKeyConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.ForeignKeyConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.ForeignKeyConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.ForeignKeyConfiguration.Properties">
      <summary>アソシエーションの外部キーに使用するプロパティを取得します。</summary>
      <returns>アソシエーションの外部キーに使用するプロパティ。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.IAttributeConfiguration">
      <summary>データ注釈を使用して適用できるモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.IAttributeConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用するデータ注釈属性の本体を取得します。</summary>
      <returns>属性の本体。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.IConfiguration">
      <summary>モデル構成を表します。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.IFluentConfiguration">
      <summary>Code First Fluent API を使用して適用できるモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.IFluentConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration">
      <summary>多対多アソシエーションの結合テーブル名および列名を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.LeftKeys">
      <summary>左側のエンティティのテーブルへの外部キーの列の名前を取得します。</summary>
      <returns>左側のエンティティのテーブルへの外部キーの列の名前。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.RightKeys">
      <summary>右側のエンティティのテーブルへの外部キーの列の名前を取得します。</summary>
      <returns>右側のエンティティのテーブルへの外部キーの列の名前。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.Schema">
      <summary>テーブルのスキーマを取得または設定します。</summary>
      <returns>テーブルのスキーマ。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.JoinTableConfiguration.Table">
      <summary>テーブルの名前を取得または設定します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.KeyConfiguration">
      <summary>エンティティのキーを設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.KeyConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.KeyConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.KeyConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成のメソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.KeyConfiguration.KeyProperties">
      <summary>エンティティのキーに使用するプロパティを取得します。</summary>
      <returns>エンティティのキーに使用するプロパティ。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.KeyPropertyConfiguration">
      <summary>プロパティをエンティティのキーの一部として含めるモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.KeyPropertyConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.KeyPropertyConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.KeyPropertyConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>属性の本体を取得します。</summary>
      <returns>属性の本体。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration">
      <summary>文字列またはバイナリ プロパティの最大長を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>長さの構成に関連付けられている属性の本体を返します。</summary>
      <returns>長さの構成に関連付けられている属性の本体。</returns>
      <param name="code">構成のコード ヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>長さの構成に関連付けられているメソッド チェーンを返します。</summary>
      <returns>長さの構成に関連付けられているメソッド チェーン。</returns>
      <param name="code">構成のコード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthConfiguration.MaxLength">
      <summary>プロパティの最大長を取得または設定します。</summary>
      <returns>プロパティの最大長。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthStringConfiguration">
      <summary>文字列プロパティの最大長を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthStringConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthStringConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MaxLengthStringConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成に関連付けられている属性の本体を取得します。</summary>
      <returns>構成に関連付けられている属性の本体。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration">
      <summary>アソシエーションの複数要素の接続性を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration.LeftEntityType">
      <summary>アソシエーションの左端のエンティティ型を取得または設定します。</summary>
      <returns>アソシエーションの左端のエンティティ型。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration.LeftNavigationProperty">
      <summary>アソシエーションの左端のナビゲーション プロパティを取得または設定します。</summary>
      <returns>アソシエーションの左端のナビゲーション プロパティ。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.MultiplicityConfiguration.RightNavigationProperty">
      <summary>アソシエーションの右端のナビゲーション プロパティを取得または設定します。</summary>
      <returns>アソシエーションの右端のナビゲーション プロパティ。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.NonUnicodeConfiguration">
      <summary>文字列プロパティを non-Unicode としてマークするモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.NonUnicodeConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.NonUnicodeConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.NonUnicodeConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDateTimeConfiguration">
      <summary>一時的なプロパティの精度を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDateTimeConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDateTimeConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDateTimeConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDateTimeConfiguration.Precision">
      <summary>プロパティの有効桁数を取得または設定します。</summary>
      <returns>プロパティの有効桁数。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration">
      <summary>Decimal 型のプロパティの有効桁数と小数部桁数を設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration.Precision">
      <summary>プロパティの有効桁数を取得または設定します。</summary>
      <returns>プロパティの有効桁数。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.PrecisionDecimalConfiguration.Scale">
      <summary>プロパティの小数点以下桁数を取得または設定します。</summary>
      <returns>プロパティの小数点以下桁数。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.RequiredConfiguration">
      <summary>必要に応じてプロパティをマークするモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.RequiredConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.RequiredConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.RequiredConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>属性の本体を取得します。</summary>
      <returns>属性の本体。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.RequiredConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration">
      <summary>エンティティのテーブルを設定するモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成に関連付けられている属性の本体を取得します。</summary>
      <returns>構成に関連付けられている属性の本体。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成を適用する Fluent API メソッド チェーンを取得します。</summary>
      <returns>メソッド チェーン。</returns>
      <param name="code">コードの生成に使用するヘルパー。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration.Schema">
      <summary>テーブルのデータベース スキーマを取得または設定します。</summary>
      <returns>テーブルのデータベース スキーマ。</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.TableConfiguration.Table">
      <summary>テーブルの名前を取得または設定します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.TimestampConfiguration">
      <summary>バイナリ列をタイムスタンプとしてマークするモデル構成を表します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TimestampConfiguration.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.TimestampConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TimestampConfiguration.GetAttributeBody(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成に関連付けられている属性の本体を取得します。</summary>
      <returns>構成に関連付けられている属性の本体。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.TimestampConfiguration.GetMethodChain(Microsoft.Data.Entity.Design.CodeGeneration.CodeHelper)">
      <summary>構成に関連付けられているメソッド チェーンを取得します。</summary>
      <returns>構成に関連付けられているメソッド チェーン。</returns>
      <param name="code">コード ヘルパー。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper">
      <summary>Visual Basic コードを生成するためのヘルパー メソッドを提供します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper.AnonymousType(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定したプロパティの匿名型ラムダを取得します。</summary>
      <returns>ラムダ。</returns>
      <param name="properties">プロパティ。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper.Attribute(System.String)">
      <summary>指定された本体の属性を取得します。</summary>
      <returns>属性。</returns>
      <param name="attributeBody">属性の本体。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper.CodeProvider">
      <summary>Visual Basic コードを生成したりコンパイルしたりするために使うコード プロバイダーを取得します。</summary>
      <returns>Visual Basic コードを生成したりコンパイルしたりするために使うコード プロバイダー。</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.CodeGeneration.VBCodeHelper.StringArray(System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定された値の文字列配列リテラルを取得します。</summary>
      <returns>リテラル。</returns>
      <param name="values">値。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity">
      <summary>TemplateActivity を使用して SSDL から DDL への変換を可能にする SsdlToDdlActivity。このクラスでは、Microsoft.Data.Entity.Design.CreateDatabase を除く Microsoft.Data.Entity.Design.* 名前空間内のインスタンス型 (特に、エンティティ デザイナーによってインスタンス化される型) への依存を避ける必要があります。このクラスは、VS 依存関係により、このプロジェクトに存在しています。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.DdlOutput">
      <summary>
        <see cref="P:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.SsdlInput" /> プロパティと <see cref="P:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.ExistingSsdlInput" /> プロパティでストア スキーマ定義言語 (SSDL) から生成されるデータ定義言語 (DDL) を指定する Windows Workflow <see cref="T:System.Activities.OutArgument`1" />。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.ExistingSsdlInput">
      <summary>既存のデータベース オブジェクトを破棄するデータ定義言語 (DDL) の生成元である、既存のストア スキーマ定義言語 (SSDL) を指定する Windows Workflow <see cref="T:System.Activities.InArgument`1" />。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.DatabaseGeneration.Activities.SsdlToDdlActivity.SsdlInput">
      <summary>新しいデータベース オブジェクトを作成するデータ定義言語 (DDL) の生成元であるストア スキーマ定義言語 (SSDL) を指定する Windows Workflow <see cref="T:System.Activities.InArgument`1" />。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerConversionData">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerConversionData.FileExtension">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerLayerData">
      <summary>さまざまなレイヤーを区別するために LayerManager によって使用される親インターフェイス。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerLayerData.LayerName">
      <summary>この機能拡張レイヤーの名前。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerPropertyData">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Extensibility.IEntityDesignerPropertyData.EntityDesignerSelection">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>
        <see cref="T:Microsoft.Data.Entity.Design.Extensibility.EntityDesignerSelection" /> を返します。</returns>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.Extensibility.WizardStage">
      <summary>WizardStage は、ウィザードでウィザード拡張ページをモデル生成の前または後のどちらで実行するかを示します。</summary>
    </member>
    <member name="F:Microsoft.Data.Entity.Design.Extensibility.WizardStage.PostModelGeneration">
      <summary>ウィザード拡張ページはモデル生成の後に実行されます。</summary>
    </member>
    <member name="F:Microsoft.Data.Entity.Design.Extensibility.WizardStage.PreModelGeneration">
      <summary>ウィザード拡張ページはモデル生成の前に実行されます。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.Templates.TemplateResources">
      <summary>ローカライズされた文字列などを調べるために、厳密に型指定されたリソース クラス。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Culture">
      <summary>この厳密に型指定されたリソース クラスを使用して、すべてのリソース ルックアップに対して現在のスレッドの CurrentUICulture プロパティをオーバーライドします。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.ResourceManager">
      <summary>このクラスで使用される、キャッシュされた ResourceManager インスタンスに戻ります。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_CaseInsensitiveEntitySetConflict">
      <summary>「EntitySet '{0}.{1}' は、既存の EntitySet とは大文字と小文字のみが異なり、現在の言語オプションと互換性がありません。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_CaseInsensitiveMemberConflict">
      <summary>「Member '{0}.{1}' は、既存の Member とは大文字と小文字のみが異なり、現在の言語オプションと互換性がありません。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_CaseInsensitiveTypeConflict">
      <summary>「Type '{0}' は一意ではありません」に類似したローカライズされた文字列を検索します。これは、現在の言語オプションと互換性がない Type の大文字と小文字のみが異なっていることが原因である可能性があります。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_GeneratedCodeCommentLine1">
      <summary>「このコードはテンプレートから生成されました。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_GeneratedCodeCommentLine2">
      <summary>「このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_GeneratedCodeCommentLine3">
      <summary>「このファイルに対する手動の変更は、コードが再生成されると上書きされます。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.Templates.TemplateResources.Template_ReplaceVsItemTemplateToken">
      <summary>「置換トークン '$edmxInputFile$' を、生成元になる .edmx ファイルの実際の名前で上書きしてください。」に類似したローカライズされた文字列を検索します。</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent">
      <summary>これは、ローカライズ用のサテライト リソース DLL からアクセスできる必要があるため、パブリックである必要があります。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent.InitializeComponent">
      <summary>InitializeComponent</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>イベントと名前をコンパイルされたコンテンツにアタッチします。</summary>
      <param name="connectionId">呼び出しを区別するための識別子トークン。</param>
      <param name="target">イベントおよび名前を結び付けるターゲット。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.UI.Views.Explorer.EntityDesignExplorerContent.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>コンパイルしたコンテンツでイベント setter およびテンプレートにイベントをアタッチします。</summary>
      <param name="connectionId">イベント接続に使用する一意の接続 ID。</param>
      <param name="target">イベント接続のターゲット。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.BeforeOpeningFile(EnvDTE.ProjectItem)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="projectItem">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.ProjectFinishedGenerating(EnvDTE.Project)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="project">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.ProjectItemFinishedGenerating(EnvDTE.ProjectItem)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="projectItem">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.RunFinished">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.RunStarted(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.VisualStudio.TemplateWizard.WizardRunKind,System.Object[])">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="automationObject">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="replacementsDictionary">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="runKind">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="customParams">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.AddArtifactGeneratorWizard.ShouldAddProjectItem(System.String)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</returns>
      <param name="filePath">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard">
      <summary>"ADO.NET Entity Data Model" 型の新しい項目が既存のプロジェクトに追加されると、Visual Studio はこのウィザードを起動します。このウィザードは、.vstemplate ファイルの項目テンプレートに登録されます。この項目テンプレートで追加されたファイルは次のとおりです。+- modelName.edmx | +- modelName.edmx.diagram | +- modelName.Designer.cs [or vb] =&amp;amp;gt; コード ジェネレーター出力 (EF5 および Legacy ObjectContext ジェネレーターの場合) または +- ModelName.cs [or vb] - (CodeFirst の場合)</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.#ctor">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.BeforeOpeningFile(EnvDTE.ProjectItem)">
      <summary>このメソッドは、OpenInEditor 属性を含む項目を開く前に呼び出されます。これにより、テンプレートの項目を開く前にカスタム ウィザードのロジックを実行します</summary>
      <param name="projectItem">開かれるプロジェクト項目</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.ProjectFinishedGenerating(EnvDTE.Project)">
      <summary>このメソッドは、プロジェクトが作成された後に呼び出されます。これにより、プロジェクトが生成を完了したときにカスタム ウィザードのロジックを実行します</summary>
      <param name="project">プロジェクト。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.ProjectItemFinishedGenerating(EnvDTE.ProjectItem)">
      <summary>このメソッドは、プロジェクト テンプレートではなく、項目テンプレートに対してのみ呼び出されます</summary>
      <param name="projectItem">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.RunFinished">
      <summary>このメソッドは、テンプレート ウィザードの実行終了時に呼び出されます。これにより、ウィザードがすべてのタスクを完了したときにカスタム ウィザードのロジックを実行します。.vstemplate によって追加されたファイルに対して、ここでプロジェクト項目の依存関係を設定します</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.RunStarted(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.VisualStudio.TemplateWizard.WizardRunKind,System.Object[])">
      <summary>このメソッドは、テンプレート ウィザードの実行開始時に呼び出されます。これにより、何も作成されていない状態でカスタム ウィザードのロジックを実行できます。たとえば、何らかの方法で実行に影響を与えるユーザー入力を収集する用途に適しています</summary>
      <param name="automationObject">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="replacementsDictionary">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="runKind">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="customParams">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.ModelObjectItemWizard.ShouldAddProjectItem(System.String)">
      <summary>指定されたプロジェクト項目がプロジェクトに追加されるべきかどうかを示します。</summary>
      <returns>プロジェクト項目が追加されるべきものである場合は true、それ以外は false。</returns>
      <param name="filePath">プロジェクト項目のパス。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.#ctor">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.BeforeOpeningFile(EnvDTE.ProjectItem)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="projectItem">プロジェクト項目。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.ProjectFinishedGenerating(EnvDTE.Project)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="project">プロジェクト。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.ProjectItemFinishedGenerating(EnvDTE.ProjectItem)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="projectItem">プロジェクト項目。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.RunFinished">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.RunStarted(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.VisualStudio.TemplateWizard.WizardRunKind,System.Object[])">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="automationObject">オートメーション オブジェクト。</param>
      <param name="replacementsDictionary">置換ディクショナリ。</param>
      <param name="runKind">実行される種類。</param>
      <param name="customParams">カスタム パラメーター。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.ModelWizard.OneEFWizard.ShouldAddProjectItem(System.String)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>プロジェクト項目が追加されるべきものである場合は true、それ以外は false。</returns>
      <param name="filePath">ファイル パス。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator">
      <summary>VS における IVsSingleFileGenerator の概念のマネージ ラッパー。これは、ビルド時に呼び出され、ファイルを入力として受け取り、コンパイル可能なコード ファイルを出力として提供できるカスタム ツールです。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.DefaultExtension(System.String@)">
      <summary>IVsSingleFileGenerator.DefaultExtension メソッドを実装します。生成されたファイルの拡張子を返します</summary>
      <returns>成功した場合は S_OK、それ以外の場合は E_FAIL</returns>
      <param name="pbstrDefaultExtension">Out パラメーターは、出力ファイル名に付けられる拡張子を保持します。返される拡張子には、先頭にピリオドがある必要があります</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.DefaultExtensionString">
      <summary>このジェネレーターの既定の拡張子を取得します</summary>
      <returns>このジェネレーターの既定の拡張子を表す文字列</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.Dispose">
      <summary>アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.Dispose(System.Boolean)">
      <summary>アンマネージ リソースおよび (オプションで) マネージ リソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.Finalize">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator" /> クラスのインスタンスを終了処理します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)">
      <summary>生成を行うために VS シェルが呼び出すメイン メソッド</summary>
      <returns>状態コード。</returns>
      <param name="wszInputFilePath">入力ファイルへのパス</param>
      <param name="bstrInputFileContents">文字列としての入力ファイルの内容 (UTF-8 から Unicode への変換などの変換をシェルが処理します)</param>
      <param name="wszDefaultNamespace">生成されたコード ファイルの既定の名前空間</param>
      <param name="rgbOutputFileContents">出力ファイルの内容のバイト配列</param>
      <param name="pcbOutput">出力バイト配列内のバイト数</param>
      <param name="pGenerateProgress">進行状況の更新をシェルに送信するインターフェイス</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.GenerateCode(System.String,System.String,System.String)">
      <summary>指定された入力ファイルに対して、コードの生成を実際に行うメソッド。</summary>
      <returns>バイト配列として生成されたコード ファイル</returns>
      <param name="inputFileName">入力ファイル名</param>
      <param name="inputFileContent">文字列としてのファイルの内容</param>
      <param name="defaultNamespace">既定の名前空間。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGenerator.GeneratorErrorCallback(System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>シェルのコールバック機構でエラーを通知するメソッド。</summary>
      <param name="warning">これが警告の場合は true</param>
      <param name="level">重大度レベル</param>
      <param name="message">ユーザーに表示されるテキスト</param>
      <param name="line">エラー/警告の行番号</param>
      <param name="column">エラー/警告の列番号</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite">
      <summary>このクラスは、プリプロセッサ ビルド ステップで共同作成するために存在します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.CodeProvider">
      <summary>ジェネレーターが呼び出されたプロジェクト項目を含むプロジェクトの言語の CodeDomProvider オブジェクトを返します</summary>
      <returns>CodeDomProvider オブジェクト</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.Dispose(System.Boolean)">
      <summary>アンマネージ リソースおよび (オプションで) マネージ リソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.ErrorList">
      <summary>Vs ErrorList オブジェクトを取得します</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.GetService(System.Type)">
      <summary>型によってサービスを取得するメソッド</summary>
      <returns>要求されたサービスを実装するオブジェクト</returns>
      <param name="serviceType">取得するサービスの型</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.GetSite(System.Guid@,System.IntPtr@)">
      <summary>IOleObjectWithSite の GetSite メソッド</summary>
      <param name="riid">取得するインターフェイス</param>
      <param name="ppvSite">戻り値を格納する配列</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.Project">
      <summary>コード ジェネレーターが呼び出されたプロジェクト項目を含むプロジェクトの EnvDTE.Project オブジェクトを返します</summary>
      <returns>コード ジェネレーターが呼び出されたプロジェクト項目を含むプロジェクトの EnvDTE.Project オブジェクト</returns>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.ProjectItem">
      <summary>コード ジェネレーターが呼び出されたプロジェクト項目に対応する EnvDTE.ProjectItem オブジェクトを返します</summary>
      <returns>コード ジェネレーターが呼び出されたプロジェクト項目の EnvDTE.ProjectItem</returns>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.SetSite(System.Object)">
      <summary>IOleObjectWithSite の SetSite メソッド</summary>
      <param name="pUnkSite">このオブジェクトに使用するサイト</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.BaseCodeGeneratorWithSite.SiteServiceProvider">
      <summary>IOleServiceProvider を指定して ServiceProvider を要求に基づいて作成します</summary>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator">
      <summary>SFG ベースのコード ジェネレーターは、次の処理を実行します。1.EDMX ファイル内の CodeGenerationStrategy オプションを読み取る。2.CodeGenerationStrategy が 'Default' に設定されている場合、コード生成を続行する。3.System.Data.Entity.Design CodeGen API を呼び出す</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator.AddNameOfItemToBeRenamed(System.UInt32,System.String)">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="itemId">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
      <param name="oldInputName">この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</param>
    </member>
    <member name="F:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator.CodeGenToolName">
      <summary>この API は、Entity Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator.DefaultExtensionString">
      <summary>CodeDomProvider から出力ファイルの既定の拡張子を取得します</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.SingleFileGenerator.EntityModelCodeGenerator.GenerateCode(System.String,System.String,System.String)">
      <summary>CodeGen API を呼び出して、CSDL ファイルからコード ファイルを生成します</summary>
      <returns>null はエラーを意味します。それ以外の場合は、ファイルの内容が返されます</returns>
      <param name="inputFileName">CSDL ファイルの完全パス。これは、ProjectItem から提供されます</param>
      <param name="inputFileContent">CSDL ファイルの内容。メモリ内のドキュメントから離れて生成できるように、常にこれを使用する必要があります</param>
      <param name="defaultNamespace">既定の名前空間。</param>
    </member>
    <member name="T:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity">
      <summary>WF ワークフロー内で T4 テンプレートの変換を可能にする TemplateActivity。このクラスでは、Microsoft.Data.Entity.Design.CreateDatabase を除く Microsoft.Data.Entity.Design.* 名前空間内のインスタンス型 (特に、エンティティ デザイナーによってインスタンス化される型) への依存を避ける必要があります。このクラスは、VS 依存関係により、このプロジェクトに存在しています。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.#ctor">
      <summary>
        <see cref="T:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.Execute(System.Activities.NativeActivityContext)">
      <summary>Visual Studio STextTemplatingService を呼び出して、<see cref="P:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.TemplatePath" /> プロパティで指定されたテキスト テンプレートを変換します。</summary>
      <param name="context">現在のアクティビティの状態。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.OnGetTemplateInputs(System.Activities.NativeActivityContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>テキスト テンプレートへの入力を提供するために使用される <see cref="T:System.Collections.IDictionary" /> を設定します。このメソッドは、カスタム入力を提供するために派生クラスでオーバーライドできます。これらの入力は、テキスト テンプレートで使用できるように <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> に書き込まれます。</summary>
      <param name="context">現在のアクティビティの状態。</param>
      <param name="inputs">テキスト テンプレートで使用するために入力名を入力値に関連付けるディクショナリ。</param>
    </member>
    <member name="M:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.ProcessTemplate(System.String)">
      <summary>Visual Studio のテキスト テンプレート サービスを使用し、マクロを含むパス (つまり、"$(DevEnvDir)\...") を指定して、T4 テンプレートを処理します。メモ: ファイルでないテンプレート パスや UNC パスであるテンプレート パスは使用できません。</summary>
      <returns>テンプレート処理の出力。</returns>
      <param name="templatePath">プロジェクトベースのマクロが含まれる、テンプレートのファイル パス</param>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.TemplateOutput">
      <summary>
        <see cref="P:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.TemplatePath" /> プロパティで指定されるテンプレートの出力。</summary>
    </member>
    <member name="P:Microsoft.Data.Entity.Design.VisualStudio.TextTemplating.TemplateActivity.TemplatePath">
      <summary>処理されるテキスト テンプレートのパス。</summary>
    </member>
    <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
      <summary>GeneratedInternalTypeHelper</summary>
    </member>
    <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.#ctor">
      <summary>
        <see cref="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
  </members>
</doc>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ﻿<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension=".vb"#><#

Const inputFile As String = "$edmxInputFile$"
Dim textTransform As DynamicTextTransformation = DynamicTextTransformation.Create(Me)
Dim code As CodeGenerationTools = New CodeGenerationTools(Me)
Dim ef As MetadataTools = New MetadataTools(Me)
Dim typeMapper As TypeMapper = New TypeMapper(code, ef, textTransform.Errors)
Dim fileManager As EntityFrameworkTemplateFileManager = EntityFrameworkTemplateFileManager.Create(Me)
Dim itemCollection As IEnumerable(Of GlobalItem) = New EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile)
Dim codeStringGenerator As CodeStringGenerator = New CodeStringGenerator(code, typeMapper, ef)

If Not typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile)  Then
    Return String.Empty
End If

WriteHeader(fileManager)

For Each loopEntity As EntityType In typeMapper.GetItemsToGenerate(Of EntityType)(itemCollection)
    Dim entity as EntityType = loopEntity
    fileManager.StartNewFile(entity.Name & ".vb")
    BeginNamespace(code)
#>
<#=codeStringGenerator.EntityClassOpening(entity)#>
<#
    Dim simpleProperties as IEnumerable(Of EdmProperty) = typeMapper.GetSimpleProperties(entity)
    If simpleProperties.Any() Then
        For Each edmProperty As EdmProperty In simpleProperties
#>
<#=codeStringGenerator.SimpleProperty(edmProperty)#>
<#
        Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = typeMapper.GetComplexProperties(entity)
    If complexProperties.Any() Then
#>

<#
       For Each complexProperty As EdmProperty In complexProperties
#>
<#=codeStringGenerator.ComplexProperty(complexProperty)#>
<#
       Next
    End If

    Dim navigationProperties as IEnumerable(Of NavigationProperty) = typeMapper.GetNavigationProperties(entity)
    If navigationProperties.Any() Then
#>

<#
        For Each navigationProperty As NavigationProperty In navigationProperties
#>
<#=codeStringGenerator.NavigationProperty(navigationProperty)#>
<#
        Next
    End If

#>

End Class
<#
    EndNamespace(code)
Next

For Each loopComplex As ComplexType In typeMapper.GetItemsToGenerate(Of ComplexType)(itemCollection)
    Dim complex as ComplexType = loopComplex
    fileManager.StartNewFile(complex.Name & ".vb")
    BeginNamespace(code)
#>
Partial <#=Accessibility.ForType(complex)#> Class <#=code.Escape(complex)#>
<#

    Dim simpleProperties as IEnumerable(Of EdmProperty) = typeMapper.GetSimpleProperties(complex)
    If simpleProperties.Any() Then
        For Each edmProperty As EdmProperty In simpleProperties
#>
<#=codeStringGenerator.SimpleProperty(edmProperty)#>
<#
        Next
    End If

    Dim complexProperties as IEnumerable(Of EdmProperty) = typeMapper.GetComplexProperties(complex)
    If complexProperties.Any() Then
#>

<#
        For Each complexProperty As EdmProperty In complexProperties
#>
<#=codeStringGenerator.ComplexProperty(complexProperty)#>
<#
        Next
    End If

#>

End Class
<#
    EndNamespace(code)
Next

For Each enumType As SimpleType In typeMapper.GetEnumItemsToGenerate(itemCollection)
    fileManager.StartNewFile(enumType.Name & ".vb")
    BeginNamespace(code)
    If typeMapper.EnumIsFlags(enumType) Then
#>
<Flags>
<#
    End If
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
<#
    Dim foundOne As Boolean = False

    For Each member As MetadataItem In typeMapper.GetEnumMembers(enumType)

    foundOne = True
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>
<#
    Next
    If Not foundOne Then
#>
    None
<#
    End If
#>
End Enum
<#
    EndNamespace(code)
Next

fileManager.Process()
#>
<#+
Public Sub WriteHeader(ByVal fileManager As EntityFrameworkTemplateFileManager)
    fileManager.StartHeader()
#>
'------------------------------------------------------------------------------
' <auto-generated>
' <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
'
' <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
' <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic

<#+
    FileManager.EndBlock()
End Sub

Public Sub BeginNamespace(ByVal code As CodeGenerationTools)
    Dim codeNamespace as String = code.VsNamespaceSuggestion()
    If Not String.IsNullOrEmpty(codeNamespace) Then
#>
Namespace <#=code.EscapeNamespace(codeNamespace)#>

<#+
        PushIndent("    ")
    End If
End Sub

Public Sub EndNamespace(ByVal code As CodeGenerationTools)
    If Not String.IsNullOrEmpty(code.VsNamespaceSuggestion()) Then
        PopIndent()
#>

End Namespace
<#+
    End If
End Sub

Public Const TemplateId As String = "VB_DbContext_Types_EF5"

Public Class CodeStringGenerator
    Private ReadOnly _code As CodeGenerationTools
    Private ReadOnly _typeMapper As TypeMapper
    Private ReadOnly _ef As MetadataTools

    Public Sub New(code As CodeGenerationTools, typeMapper As TypeMapper, ef As MetadataTools)
        ArgumentNotNull(code, "code")
        ArgumentNotNull(typeMapper, "typeMapper")
        ArgumentNotNull(ef, "ef")

        _code = code
        _typeMapper = typeMapper
        _ef = ef
    End Sub

    Public Function SimpleProperty(edmProperty As EdmProperty) As String
        Return SimpleOrComplexProperty(edmProperty, _code.StringBefore(" = ", _typeMapper.CreateLiteral(edmProperty.DefaultValue)))
    End Function

    Public Function ComplexProperty(edmProperty As EdmProperty) As String
        Return SimpleOrComplexProperty(edmProperty, " = New " & _typeMapper.GetTypeName(edmProperty.TypeUsage))
    End Function

    Public Function SimpleOrComplexProperty(edmProperty As EdmProperty, defaultValue As String) As String
        Return AnyProperty(
            Accessibility.ForProperty(edmProperty), _
            _typeMapper.GetTypeName(edmProperty.TypeUsage), _
            _code.Escape(edmProperty), _
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)), _
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)), _
            defaultValue)
    End Function

    Public Function NavigationProperty(edmProperty As NavigationProperty) As String
        Dim endType = _typeMapper.GetTypeName(edmProperty.ToEndMember.GetEntityType())
        Dim defaultValue = ""
        Dim propertyType = endType

        If(edmProperty.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many)
            defaultValue = " = New HashSet(Of " & propertyType & ")"
            propertyType = "ICollection(Of " & propertyType & ")"
        End If

        Return AnyProperty(
            PropertyAccessibilityAndVirtual(edmProperty), _
            propertyType, _
            _code.Escape(edmProperty), _
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)), _
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)), _
            defaultValue)
    End Function

    Public Function AccessibilityAndVirtual(accessibility As String) As String
        Return accessibility & (If(accessibility <> "Private", " Overridable", ""))
    End Function

    Public Function AnyProperty(accessibility As String, type As String, name As String, getterAccessibility As String, setterAccessibility As String, defaultValue As String)
        If (String.IsNullOrEmpty(getterAccessibility) AndAlso String.IsNullOrEmpty(setterAccessibility))
            Return String.Format( _
                CultureInfo.InvariantCulture, _
                "    {0} Property {1} As {2}{3}", _
                accessibility, _
                name, _
                type, _
                defaultValue)
        Else
            Return String.Format( _
                CultureInfo.InvariantCulture, _
                "{6}    Private _{0} As {1}{2}{6}" & _
                "    {3} Property {0} As {1}{6}" & _
                "        {4}Get{6}" & _
                "            Return _{0}{6}" & _
                "        End Get{6}" & _
                "        {5}Set(ByVal value As {1}){6}" & _
                "            _{0} = value{6}" & _
                "        End Set{6}" & _
                "    End Property",  _
                name, _
                type, _
                defaultValue, _
                accessibility, _
                getterAccessibility, _
                setterAccessibility, _
                Environment.NewLine)
        End If
    End Function

    Public Function PropertyAccessibilityAndVirtual(ByVal member As EdmMember) As String
        Dim propertyAccess As String = Accessibility.ForProperty(member)
        Dim setAccess as String = Accessibility.ForSetter(member)
        Dim getAccess as String = Accessibility.ForGetter(member)
        If propertyAccess <> "Private" AndAlso setAccess <> "Private" AndAlso getAccess <> "Private" Then
            Return propertyAccess & " Overridable"
        End If

        Return propertyAccess
    End Function

    Public Function EntityClassOpening(entity As EntityType) As String
        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "Partial {0} {1}Class {2}{3}", _
            Accessibility.ForType(entity), _
            _code.SpaceAfter(_code.MustInheritOption(entity)), _
            _code.Escape(entity), _
            _code.StringBefore(Environment.NewLine & "         Inherits ", _typeMapper.GetTypeName(entity.BaseType)))
    End Function

    Public Function EnumOpening(enumType As SimpleType) As String
        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "{0} Enum {1} As {2}", _
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)))
    End Function

    Public Sub WriteFunctionParameters(edmFunction As EdmFunction, writeParameter As Action(Of String, String, String, String))
        Dim parameters as IEnumerable(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef)
        For Each parameter As FunctionImportParameter In parameters.Where(Function(p) p.NeedsLocalVariable)
            Dim isNotNull as String = If(parameter.IsNullableOfT, parameter.FunctionParameterName & ".HasValue", parameter.FunctionParameterName & " IsNot Nothing")
            Dim notNullInit as String = "New ObjectParameter(""" & parameter.EsqlParameterName & """, " & parameter.FunctionParameterName & ")"
            Dim nullInit as String = "New ObjectParameter(""" & parameter.EsqlParameterName & """, GetType(" & parameter.RawClrTypeName & "))"
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit)
        Next
    End Sub

    Public Function ComposableFunctionMethod(edmFunction As EdmFunction, modelNamespace As String) As String
        Dim parameters as IEnumerable(Of FunctionImportParameter) = _typeMapper.GetParameters(edmFunction)

        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "{0} Function {1}({2}) As IQueryable(Of {3})", _
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)), _
            _code.Escape(edmFunction), _
            String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray()), _
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace))
    End Function

    Public Function ComposableCreateQuery(edmFunction As EdmFunction, modelNamespace As String) As String
        Dim parameters as IEnumerable(Of FunctionImportParameter) = _typeMapper.GetParameters(edmFunction)

        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of {0})(""[{1}].[{2}]({3})""{4})", _
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace), _
            edmFunction.NamespaceName, _
            edmFunction.Name, _
            String.Join(", ", parameters.Select(Function(p) "@" & Convert.ToString(p.EsqlParameterName)).ToArray()), _
            _code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray())))
    End Function

    Public Function FunctionMethod(edmFunction As EdmFunction, modelNamespace As String, includeMergeOption As Boolean) As String
        Dim parameters as IEnumerable(Of FunctionImportParameter) = _typeMapper.GetParameters(edmFunction)
        Dim returnType as TypeUsage = _typeMapper.GetReturnType(edmFunction)

        Dim paramList as String = String.Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
        If includeMergeOption Then
            paramList = _code.StringAfter(paramList, ", ") & "mergeOption As MergeOption"
        End If

        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "{0} Function {1}({2}) As {3}", _
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)), _
            _code.Escape(edmFunction), _
            paramList, _
            If(returnType Is Nothing, "Integer", "ObjectResult(Of " & _typeMapper.GetTypeName(returnType, modelNamespace) & ")"))
    End Function

    Public Function ExecuteFunction(edmFunction As EdmFunction, modelNamespace As String, includeMergeOption As Boolean) As String
        Dim parameters as IEnumerable(Of FunctionImportParameter) = _typeMapper.GetParameters(edmFunction)
        Dim returnType as TypeUsage = _typeMapper.GetReturnType(edmFunction)

        Dim callParams as String = _code.StringBefore(", ", String.Join(", ", parameters.Select(Function(p) p.ExecuteParameterName).ToArray()))
        If includeMergeOption Then
            callParams = ", mergeOption" & callParams
        End If

        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction{0}(""{1}""{2})", _
            If(returnType Is Nothing, "", "(Of " & _typeMapper.GetTypeName(returnType, ModelNamespace) & ")"), _
            edmFunction.Name, _
            callParams)
    End Function

    Public Function DbSet(entitySet As EntitySet) As String
        Return String.Format( _
            CultureInfo.InvariantCulture, _
            "{0} Property {1}() As DbSet(Of {2})", _
            Accessibility.ForReadOnlyProperty(entitySet), _
            _code.Escape(entitySet), _
            _typeMapper.GetTypeName(entitySet.ElementType))
    End Function
End Class

Public Class TypeMapper
    Private Const ExternalTypeNameAttributeName As String = "http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName"

    Private ReadOnly _errors As System.Collections.IList
    Private ReadOnly _code As CodeGenerationTools
    Private ReadOnly _ef As MetadataTools

    Public Sub New(code As CodeGenerationTools, ef As MetadataTools, errors As System.Collections.IList)
        ArgumentNotNull(code, "code")
        ArgumentNotNull(ef, "ef")
        ArgumentNotNull(errors, "errors")

        _code = code
        _ef = ef
        _errors = errors
    End Sub

    Public Function GetTypeName(typeUsage As TypeUsage) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace := Nothing))
    End Function

    Public Function GetTypeName(edmType As EdmType) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := Nothing)
    End Function

    Public Function GetTypeName(typeUsage As TypeUsage, modelNamespace As String) As String
        Return If(typeUsage Is Nothing, Nothing, GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace))
    End Function

    Public Function GetTypeName(edmType As EdmType, modelNamespace As String) As String
        Return GetTypeName(edmType, isNullable := Nothing, modelNamespace := modelNamespace)
    End Function

    Public Function GetTypeName(edmType As EdmType, isNullable As System.Nullable(Of Boolean), modelNamespace As String) As String
        If edmType Is Nothing Then
            Return Nothing
        End If

        Dim collectionType = TryCast(edmType, CollectionType)
        If collectionType IsNot Nothing Then
            Return String.Format(CultureInfo.InvariantCulture, "ICollection( Of {0})", GetTypeName(collectionType.TypeUsage, modelNamespace))
        End If

        Dim typeName = If(_code.Escape(edmType.MetadataProperties.Where(Function(p) p.Name = ExternalTypeNameAttributeName).Select(Function(p) DirectCast(p.Value, String)).FirstOrDefault()), (If(modelNamespace IsNot Nothing AndAlso edmType.NamespaceName <> modelNamespace, _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)), _code.Escape(edmType))))

        If TypeOf edmType Is StructuralType Then
            Return typeName
        End If

        If TypeOf edmType Is SimpleType Then
            Dim clrType = UnderlyingClrType(edmType)
            If Not (IsEnumType(edmType)) Then
                typeName = _code.Escape(clrType)
            End If

            Return If(clrType.IsValueType AndAlso isNullable = True, String.Format(CultureInfo.InvariantCulture, "Nullable(Of {0})", typeName), typeName)
        End If

        Throw New ArgumentException("edmType")
    End Function

    Public Function UnderlyingClrType(edmType As EdmType) As Type
        ArgumentNotNull(edmType, "edmType")

        Dim primitiveType as PrimitiveType = TryCast(edmType, PrimitiveType)
        If primitiveType IsNot Nothing Then
            Return primitiveType.ClrEquivalentType
        End If

        If IsEnumType(edmType) Then
            Return GetEnumUnderlyingType(edmType).ClrEquivalentType
        End If

        Return GetType(Object)
    End Function

    Public Function GetEnumMemberValue(enumMember As MetadataItem) As Object
        ArgumentNotNull(enumMember, "enumMember")

        Dim valueProperty As PropertyInfo = enumMember.GetType().GetProperty("Value")
        Return If(valueProperty Is Nothing, Nothing, valueProperty.GetValue(enumMember, Nothing))
    End Function

    Public Function GetEnumMemberName(enumMember As MetadataItem) As String
        ArgumentNotNull(enumMember, "enumMember")

        Dim nameProperty As PropertyInfo = enumMember.GetType().GetProperty("Name")
        Return If(nameProperty Is Nothing, Nothing, DirectCast(nameProperty.GetValue(enumMember, Nothing), String))
    End Function

    Public Function GetEnumMembers(enumType As EdmType) As System.Collections.IEnumerable
        ArgumentNotNull(enumType, "enumType")

        Dim membersProperty As PropertyInfo = enumType.GetType().GetProperty("Members")
        Return If(membersProperty IsNot Nothing, DirectCast(membersProperty.GetValue(enumType, Nothing), System.Collections.IEnumerable), Enumerable.Empty(Of MetadataItem)())
    End Function

    Public Function EnumIsFlags(enumType As EdmType) As Boolean
        ArgumentNotNull(enumType, "enumType")

        Dim isFlagsProperty As PropertyInfo = enumType.GetType().GetProperty("IsFlags")
        Return isFlagsProperty IsNot Nothing AndAlso CBool(isFlagsProperty.GetValue(enumType, Nothing))
    End Function

    Public Function IsEnumType(edmType As GlobalItem) As Boolean
        ArgumentNotNull(edmType, "edmType")

        Return edmType.GetType().Name = "EnumType"
    End Function

    Public Function GetEnumUnderlyingType(enumType As EdmType) As PrimitiveType
        ArgumentNotNull(enumType, "enumType")

        Return DirectCast(enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, Nothing), PrimitiveType)
    End Function

    Public Function CreateLiteral(value As Object) As String
        If value Is Nothing OrElse value.GetType() IsNot GetType(TimeSpan) Then
            Return _code.CreateLiteral(value)
        End If

        Return String.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", DirectCast(value, TimeSpan).Ticks)
    End Function

    Public Function VerifyCaseInsensitiveTypeUniqueness(types As IEnumerable(Of String), sourceFile As String) As Boolean
        ArgumentNotNull(types, "types")
        ArgumentNotNull(sourceFile, "sourceFile")

        Dim hash As HashSet(Of String) = New HashSet(Of String)(StringComparer.InvariantCultureIgnoreCase)
        If types.Any(Function(item) Not hash.Add(item)) Then
            _errors.Add(New CompilerError(sourceFile, -1, -1, "6023", String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"))))
            Return False
        End If
        Return True
    End Function

    Public Function GetEnumItemsToGenerate(itemCollection As IEnumerable(Of GlobalItem)) As IEnumerable(Of SimpleType)
        Return GetItemsToGenerate(Of SimpleType)(itemCollection).Where(Function(e) IsEnumType(e))
    End Function

    Public Function GetItemsToGenerate(Of T As EdmType)(itemCollection As IEnumerable(Of GlobalItem)) As IEnumerable(Of T)
        Return itemCollection.OfType(Of T)().Where(Function(i) Not i.MetadataProperties.Any(Function(p) p.Name = ExternalTypeNameAttributeName)).OrderBy(Function(i) i.Name)
    End Function

    Public Function GetAllGlobalItems(itemCollection As IEnumerable(Of GlobalItem)) As IEnumerable(Of String)
        Return itemCollection.Where(Function(i) TypeOf i Is EntityType OrElse TypeOf i Is ComplexType OrElse TypeOf i Is EntityContainer OrElse IsEnumType(i)).Select(Function(g) GetGlobalItemName(g))
    End Function

    Public Function GetGlobalItemName(item As GlobalItem) As String
        If TypeOf item Is EdmType Then
            Return DirectCast(item, EdmType).Name
        Else
            Return DirectCast(item, EntityContainer).Name
        End If
    End Function

    Public Function GetSimpleProperties(type As EntityType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is SimpleType AndAlso p.DeclaringType.Equals(type))
    End Function

    Public Function GetSimpleProperties(type As ComplexType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is SimpleType AndAlso p.DeclaringType.Equals(type))
    End Function

    Public Function GetComplexProperties(type As EntityType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType.Equals(type))
    End Function

    Public Function GetComplexProperties(type As ComplexType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is ComplexType AndAlso p.DeclaringType.Equals(type))
    End Function

    Public Function GetPropertiesWithDefaultValues(type As EntityType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is SimpleType AndAlso p.DeclaringType.Equals(type) AndAlso p.DefaultValue IsNot Nothing)
    End Function

    Public Function GetPropertiesWithDefaultValues(type As ComplexType) As IEnumerable(Of EdmProperty)
        Return type.Properties.Where(Function(p) TypeOf p.TypeUsage.EdmType Is SimpleType AndAlso p.DeclaringType.Equals(type) AndAlso p.DefaultValue IsNot Nothing)
    End Function

    Public Function GetNavigationProperties(type As EntityType) As IEnumerable(Of NavigationProperty)
        Return type.NavigationProperties.Where(Function(np) np.DeclaringType.Equals(type))
    End Function

    Public Function GetCollectionNavigationProperties(type As EntityType) As IEnumerable(Of NavigationProperty)
        Return type.NavigationProperties.Where(Function(np) np.DeclaringType.Equals(type) AndAlso np.ToEndMember.RelationshipMultiplicity = RelationshipMultiplicity.Many)
    End Function

    Public Function GetReturnParameter(edmFunction As EdmFunction) As FunctionParameter
        ArgumentNotNull(edmFunction, "edmFunction")

        Dim returnParamsProperty As PropertyInfo = edmFunction.GetType().GetProperty("ReturnParameters")
        Return If(returnParamsProperty Is Nothing, edmFunction.ReturnParameter, DirectCast(returnParamsProperty.GetValue(edmFunction, Nothing), IEnumerable(Of FunctionParameter)).FirstOrDefault())
    End Function

    Public Function IsComposable(edmFunction As EdmFunction) As Boolean
        ArgumentNotNull(edmFunction, "edmFunction")

        Dim isComposableProperty As PropertyInfo = edmFunction.GetType().GetProperty("IsComposableAttribute")
        Return isComposableProperty IsNot Nothing AndAlso CBool(isComposableProperty.GetValue(edmFunction, Nothing))
    End Function

    Public Function GetParameters(edmFunction As EdmFunction) As IEnumerable(Of FunctionImportParameter)
        Return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef)
    End Function

    Public Function GetReturnType(edmFunction As EdmFunction) As TypeUsage
        Dim returnParam As FunctionParameter = GetReturnParameter(edmFunction)
        Return If(returnParam Is Nothing, Nothing, _ef.GetElementType(returnParam.TypeUsage))
    End Function

    Public Function GenerateMergeOptionFunction(edmFunction As EdmFunction, includeMergeOption As Boolean) As Boolean
        Dim returnType As TypeUsage = GetReturnType(edmFunction)
        Return Not includeMergeOption AndAlso returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType
    End Function
End Class

Public Class EdmMetadataLoader
    Private ReadOnly _host As IDynamicHost
    Private ReadOnly _errors As System.Collections.IList

    Public Sub New(host As IDynamicHost, errors As System.Collections.IList)
        ArgumentNotNull(host, "host")
        ArgumentNotNull(errors, "errors")

        _host = host
        _errors = errors
    End Sub

    Public Function CreateEdmItemCollection(sourcePath As String) As IEnumerable(Of GlobalItem)
        ArgumentNotNull(sourcePath, "sourcePath")

        If Not ValidateInputPath(sourcePath) Then
            Return New EdmItemCollection()
        End If

        Dim schemaElement As XElement = LoadRootElement(_host.ResolvePath(sourcePath))
        If schemaElement IsNot Nothing Then
            Using reader = schemaElement.CreateReader()
                Dim errors As IList(Of EdmSchemaError)
                Dim itemCollection As EdmItemCollection = MetadataItemCollectionFactory.CreateEdmItemCollection(New XmlReader() {reader}, errors)

                ProcessErrors(errors, sourcePath)

                Return itemCollection
            End Using
        End If
        Return New EdmItemCollection()
    End Function

    Public Function GetModelNamespace(sourcePath As String) As String
        ArgumentNotNull(sourcePath, "sourcePath")

        If Not ValidateInputPath(sourcePath) Then
            Return String.Empty
        End If

        Dim model As XElement = LoadRootElement(_host.ResolvePath(sourcePath))
        If model Is Nothing Then
            Return String.Empty
        End If

        Dim attribute As XAttribute = model.Attribute("Namespace")
        Return If(attribute IsNot Nothing, attribute.Value, "")
    End Function

    Private Function ValidateInputPath(sourcePath As String) As Boolean
        If sourcePath = "$" & "edmxInputFile" & "$" Then
            _errors.Add(New CompilerError(If(_host.TemplateFile, sourcePath), 0, 0, String.Empty, GetResourceString("Template_ReplaceVsItemTemplateToken")))
            Return False
        End If

        Return True
    End Function

    Public Function LoadRootElement(sourcePath As String) As XElement
        ArgumentNotNull(sourcePath, "sourcePath")

        Dim root As XElement = XElement.Load(sourcePath, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)
        Return If(root.Elements().Where(Function(e) e.Name.LocalName = "Runtime").Elements().Where(Function(e) e.Name.LocalName = "ConceptualModels").Elements().Where(Function(e) e.Name.LocalName = "Schema").FirstOrDefault(), root)
    End Function

    Private Sub ProcessErrors(errors As IEnumerable(Of EdmSchemaError), sourceFilePath As String)
        For Each errorItem As EdmSchemaError In errors
            _errors.Add(New CompilerError(If(errorItem.SchemaLocation, sourceFilePath), errorItem.Line, errorItem.Column, errorItem.ErrorCode.ToString(CultureInfo.InvariantCulture), errorItem.Message) With { _
                .IsWarning = errorItem.Severity = EdmSchemaErrorSeverity.Warning _
            })
        Next
    End Sub

    Public Function IsLazyLoadingEnabled(container As EntityContainer) As Boolean
        Dim lazyLoadingAttributeValue As String
        Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled"
        Dim isLazyLoading As Boolean
        Return Not MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) OrElse Not Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) OrElse isLazyLoading
    End Function
End Class

Public Shared Sub ArgumentNotNull(Of T As Class)(arg As T, name As String)
    If arg Is Nothing Then
        Throw New ArgumentNullException(name)
    End If
End Sub

Private Shared ReadOnly ResourceManager As New Lazy(Of System.Resources.ResourceManager)(Function() New System.Resources.ResourceManager("System.Data.Entity.Design", GetType(MetadataItemCollectionFactory).Assembly), isThreadSafe := True)

Public Shared Function GetResourceString(resourceName As String) As String
    ArgumentNotNull(resourceName, "resourceName")

    Return ResourceManager.Value.GetString(resourceName, Nothing)
End Function

#>                                                                                                                                                                                                                                                                 