EMENT_CHILDREN)] IDispatch* children();
    [propget, id(DISPID_IHTMLELEMENT_ALL)] IDispatch* all();
    [propget, id(DISPID_IHTMLELEMENT2_SCOPENAME)] BSTR scopeName();
    [id(DISPID_IHTMLELEMENT2_SETCAPTURE)] void setCapture([defaultvalue(-1), in] VARIANT_BOOL containerCapture);
    [id(DISPID_IHTMLELEMENT2_RELEASECAPTURE)] void releaseCapture();
    [propput, id(DISPID_IHTMLELEMENT2_ONLOSECAPTURE), displaybind, bindable] void onlosecapture(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONLOSECAPTURE), displaybind, bindable] VARIANT onlosecapture();
    [id(DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT)] BSTR componentFromPoint([in] long x,[in] long y);
    [id(DISPID_IHTMLELEMENT2_DOSCROLL)] void doScroll([optional, in] VARIANT component);
    [propput, id(DISPID_IHTMLELEMENT2_ONSCROLL), displaybind, bindable] void onscroll(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONSCROLL), displaybind, bindable] VARIANT onscroll();
    [propput, id(DISPID_IHTMLELEMENT2_ONDRAG), displaybind, bindable] void ondrag(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDRAG), displaybind, bindable] VARIANT ondrag();
    [propput, id(DISPID_IHTMLELEMENT2_ONDRAGEND), displaybind, bindable] void ondragend(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDRAGEND), displaybind, bindable] VARIANT ondragend();
    [propput, id(DISPID_IHTMLELEMENT2_ONDRAGENTER), displaybind, bindable] void ondragenter(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDRAGENTER), displaybind, bindable] VARIANT ondragenter();
    [propput, id(DISPID_IHTMLELEMENT2_ONDRAGOVER), displaybind, bindable] void ondragover(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDRAGOVER), displaybind, bindable] VARIANT ondragover();
    [propput, id(DISPID_IHTMLELEMENT2_ONDRAGLEAVE), displaybind, bindable] void ondragleave(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDRAGLEAVE), displaybind, bindable] VARIANT ondragleave();
    [propput, id(DISPID_IHTMLELEMENT2_ONDROP), displaybind, bindable] void ondrop(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONDROP), displaybind, bindable] VARIANT ondrop();
    [propput, id(DISPID_IHTMLELEMENT2_ONBEFORECUT), displaybind, bindable] void onbeforecut(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONBEFORECUT), displaybind, bindable] VARIANT onbeforecut();
    [propput, id(DISPID_IHTMLELEMENT2_ONCUT), displaybind, bindable] void oncut(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONCUT), displaybind, bindable] VARIANT oncut();
    [propput, id(DISPID_IHTMLELEMENT2_ONBEFORECOPY), displaybind, bindable] void onbeforecopy(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONBEFORECOPY), displaybind, bindable] VARIANT onbeforecopy();
    [propput, id(DISPID_IHTMLELEMENT2_ONCOPY), displaybind, bindable] void oncopy(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONCOPY), displaybind, bindable] VARIANT oncopy();
    [propput, id(DISPID_IHTMLELEMENT2_ONBEFOREPASTE), displaybind, bindable] void onbeforepaste(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONBEFOREPASTE), displaybind, bindable] VARIANT onbeforepaste();
    [propput, id(DISPID_IHTMLELEMENT2_ONPASTE), displaybind, bindable] void onpaste(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONPASTE), displaybind, bindable] VARIANT onpaste();
    [propget, id(DISPID_IHTMLELEMENT2_CURRENTSTYLE), nonbrowsable] IHTMLCurrentStyle* currentStyle();
    [propput, id(DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE), displaybind, bindable] void onpropertychange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE), displaybind, bindable] VARIANT onpropertychange();
    [id(DISPID_IHTMLELEMENT2_GETCLIENTRECTS)] IHTMLRectCollection* getClientRects();
    [id(DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT)] IHTMLRect* getBoundingClientRect();
    [id(DISPID_IHTMLELEMENT2_SETEXPRESSION)] void setExpression([in] BSTR propname,[in] BSTR expression,[defaultvalue(""), in] BSTR language);
    [id(DISPID_IHTMLELEMENT2_GETEXPRESSION)] VARIANT getExpression([in] BSTR propname);
    [id(DISPID_IHTMLELEMENT2_REMOVEEXPRESSION)] VARIANT_BOOL removeExpression([in] BSTR propname);
    [propput, id(DISPID_IHTMLELEMENT2_TABINDEX), displaybind, bindable] void tabIndex(short v);
    [propget, id(DISPID_IHTMLELEMENT2_TABINDEX), displaybind, bindable] short tabIndex();
    [id(DISPID_IHTMLELEMENT2_FOCUS)] void focus();
    [propput, id(DISPID_IHTMLELEMENT2_ACCESSKEY), displaybind, bindable] void accessKey(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT2_ACCESSKEY), displaybind, bindable] BSTR accessKey();
    [propput, id(DISPID_IHTMLELEMENT2_ONBLUR), displaybind, bindable] void onblur(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONBLUR), displaybind, bindable] VARIANT onblur();
    [propput, id(DISPID_IHTMLELEMENT2_ONFOCUS), displaybind, bindable] void onfocus(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONFOCUS), displaybind, bindable] VARIANT onfocus();
    [propput, id(DISPID_IHTMLELEMENT2_ONRESIZE), displaybind, bindable] void onresize(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONRESIZE), displaybind, bindable] VARIANT onresize();
    [id(DISPID_IHTMLELEMENT2_BLUR)] void blur();
    [id(DISPID_IHTMLELEMENT2_ADDFILTER)] void addFilter([in] IUnknown* pUnk);
    [id(DISPID_IHTMLELEMENT2_REMOVEFILTER)] void removeFilter([in] IUnknown* pUnk);
    [propget, id(DISPID_IHTMLELEMENT2_CLIENTHEIGHT), displaybind, bindable] long clientHeight();
    [propget, id(DISPID_IHTMLELEMENT2_CLIENTWIDTH), displaybind, bindable] long clientWidth();
    [propget, id(DISPID_IHTMLELEMENT2_CLIENTTOP), displaybind, bindable] long clientTop();
    [propget, id(DISPID_IHTMLELEMENT2_CLIENTLEFT), displaybind, bindable] long clientLeft();
    [id(DISPID_IHTMLELEMENT2_ATTACHEVENT)] VARIANT_BOOL attachEvent([in] BSTR event,[in] IDispatch* pDisp);
    [id(DISPID_IHTMLELEMENT2_DETACHEVENT)] void detachEvent([in] BSTR event,[in] IDispatch* pDisp);
    [propget, id(DISPID_IHTMLELEMENT2_READYSTATE)] VARIANT readyState();
    [propput, id(DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE), displaybind, bindable] void onreadystatechange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE), displaybind, bindable] VARIANT onreadystatechange();
    [propput, id(DISPID_IHTMLELEMENT2_ONROWSDELETE), displaybind, bindable] void onrowsdelete(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONROWSDELETE), displaybind, bindable] VARIANT onrowsdelete();
    [propput, id(DISPID_IHTMLELEMENT2_ONROWSINSERTED), displaybind, bindable] void onrowsinserted(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONROWSINSERTED), displaybind, bindable] VARIANT onrowsinserted();
    [propput, id(DISPID_IHTMLELEMENT2_ONCELLCHANGE), displaybind, bindable] void oncellchange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONCELLCHANGE), displaybind, bindable] VARIANT oncellchange();
    [propput, id(DISPID_IHTMLELEMENT2_DIR), displaybind, bindable] void dir(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT2_DIR), displaybind, bindable] BSTR dir();
    [id(DISPID_IHTMLELEMENT2_CREATECONTROLRANGE)] IDispatch* createControlRange();
    [propget, id(DISPID_IHTMLELEMENT2_SCROLLHEIGHT), displaybind, bindable] long scrollHeight();
    [propget, id(DISPID_IHTMLELEMENT2_SCROLLWIDTH), displaybind, bindable] long scrollWidth();
    [propput, id(DISPID_IHTMLELEMENT2_SCROLLTOP), displaybind, bindable] void scrollTop(long v);
    [propget, id(DISPID_IHTMLELEMENT2_SCROLLTOP), displaybind, bindable] long scrollTop();
    [propput, id(DISPID_IHTMLELEMENT2_SCROLLLEFT), displaybind, bindable] void scrollLeft(long v);
    [propget, id(DISPID_IHTMLELEMENT2_SCROLLLEFT), displaybind, bindable] long scrollLeft();
    [id(DISPID_IHTMLELEMENT2_CLEARATTRIBUTES)] void clearAttributes();
    [propput, id(DISPID_IHTMLELEMENT2_ONCONTEXTMENU), displaybind, bindable] void oncontextmenu(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONCONTEXTMENU), displaybind, bindable] VARIANT oncontextmenu();
    [id(DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT)] IHTMLElement* insertAdjacentElement([in] BSTR where,[in] IHTMLElement* insertedElement);
    [id(DISPID_IHTMLELEMENT2_APPLYELEMENT)] IHTMLElement* applyElement([in] IHTMLElement* apply,[in] BSTR where);
    [id(DISPID_IHTMLELEMENT2_GETADJACENTTEXT)] BSTR getAdjacentText([in] BSTR where);
    [id(DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT)] BSTR replaceAdjacentText([in] BSTR where,[in] BSTR newText);
    [propget, id(DISPID_IHTMLELEMENT2_CANHAVECHILDREN)] VARIANT_BOOL canHaveChildren();
    [id(DISPID_IHTMLELEMENT2_ADDBEHAVIOR)] long addBehavior([in] BSTR bstrUrl,[optional, in] VARIANT* pvarFactory);
    [id(DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR)] VARIANT_BOOL removeBehavior([in] long cookie);
    [propget, id(DISPID_IHTMLELEMENT2_RUNTIMESTYLE), nonbrowsable] IHTMLStyle* runtimeStyle();
    [propget, id(DISPID_IHTMLELEMENT2_BEHAVIORURNS)] IDispatch* behaviorUrns();
    [propput, id(DISPID_IHTMLELEMENT2_TAGURN)] void tagUrn(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT2_TAGURN)] BSTR tagUrn();
    [propput, id(DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS), displaybind, bindable] void onbeforeeditfocus(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS), displaybind, bindable] VARIANT onbeforeeditfocus();
    [propget, id(DISPID_IHTMLELEMENT2_READYSTATEVALUE), hidden, restricted] long readyStateValue();
    [id(DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME)] IHTMLElementCollection* getElementsByTagName([in] BSTR v);
    [id(DISPID_IHTMLELEMENT3_MERGEATTRIBUTES)] void mergeAttributes([in] IHTMLElement* mergeThis,[optional, in] VARIANT* pvarFlags);
    [propget, id(DISPID_IHTMLELEMENT3_ISMULTILINE)] VARIANT_BOOL isMultiLine();
    [propget, id(DISPID_IHTMLELEMENT3_CANHAVEHTML)] VARIANT_BOOL canHaveHTML();
    [propput, id(DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE), displaybind, bindable] void onlayoutcomplete(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE), displaybind, bindable] VARIANT onlayoutcomplete();
    [propput, id(DISPID_IHTMLELEMENT3_ONPAGE), displaybind, bindable] void onpage(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONPAGE), displaybind, bindable] VARIANT onpage();
    [propput, id(DISPID_IHTMLELEMENT3_INFLATEBLOCK), hidden, restricted, nonbrowsable] void inflateBlock(VARIANT_BOOL v);
    [propget, id(DISPID_IHTMLELEMENT3_INFLATEBLOCK), hidden, restricted, nonbrowsable] VARIANT_BOOL inflateBlock();
    [propput, id(DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE), displaybind, bindable] void onbeforedeactivate(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE), displaybind, bindable] VARIANT onbeforedeactivate();
    [id(DISPID_IHTMLELEMENT3_SETACTIVE)] void setActive();
    [propput, id(DISPID_IHTMLELEMENT3_CONTENTEDITABLE), displaybind, bindable] void contentEditable(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT3_CONTENTEDITABLE), displaybind, bindable] BSTR contentEditable();
    [propget, id(DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE)] VARIANT_BOOL isContentEditable();
    [propput, id(DISPID_IHTMLELEMENT3_HIDEFOCUS), displaybind, bindable] void hideFocus(VARIANT_BOOL v);
    [propget, id(DISPID_IHTMLELEMENT3_HIDEFOCUS), displaybind, bindable] VARIANT_BOOL hideFocus();
    [propput, id(DISPID_IHTMLELEMENT3_DISABLED), displaybind, bindable] void disabled(VARIANT_BOOL v);
    [propget, id(DISPID_IHTMLELEMENT3_DISABLED), displaybind, bindable] VARIANT_BOOL disabled();
    [propget, id(DISPID_IHTMLELEMENT3_ISDISABLED)] VARIANT_BOOL isDisabled();
    [propput, id(DISPID_IHTMLELEMENT3_ONMOVE), displaybind, bindable] void onmove(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONMOVE), displaybind, bindable] VARIANT onmove();
    [propput, id(DISPID_IHTMLELEMENT3_ONCONTROLSELECT), displaybind, bindable] void oncontrolselect(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONCONTROLSELECT), displaybind, bindable] VARIANT oncontrolselect();
    [id(DISPID_IHTMLELEMENT3_FIREEVENT)] VARIANT_BOOL fireEvent([in] BSTR bstrEventName,[optional, in] VARIANT* pvarEventObject);
    [propput, id(DISPID_IHTMLELEMENT3_ONRESIZESTART), displaybind, bindable] void onresizestart(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONRESIZESTART), displaybind, bindable] VARIANT onresizestart();
    [propput, id(DISPID_IHTMLELEMENT3_ONRESIZEEND), displaybind, bindable] void onresizeend(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONRESIZEEND), displaybind, bindable] VARIANT onresizeend();
    [propput, id(DISPID_IHTMLELEMENT3_ONMOVESTART), displaybind, bindable] void onmovestart(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONMOVESTART), displaybind, bindable] VARIANT onmovestart();
    [propput, id(DISPID_IHTMLELEMENT3_ONMOVEEND), displaybind, bindable] void onmoveend(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONMOVEEND), displaybind, bindable] VARIANT onmoveend();
    [propput, id(DISPID_IHTMLELEMENT3_ONMOUSEENTER), displaybind, bindable] void onmouseenter(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONMOUSEENTER), displaybind, bindable] VARIANT onmouseenter();
    [propput, id(DISPID_IHTMLELEMENT3_ONMOUSELEAVE), displaybind, bindable] void onmouseleave(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONMOUSELEAVE), displaybind, bindable] VARIANT onmouseleave();
    [propput, id(DISPID_IHTMLELEMENT3_ONACTIVATE), displaybind, bindable] void onactivate(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONACTIVATE), displaybind, bindable] VARIANT onactivate();
    [propput, id(DISPID_IHTMLELEMENT3_ONDEACTIVATE), displaybind, bindable] void ondeactivate(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT3_ONDEACTIVATE), displaybind, bindable] VARIANT ondeactivate();
    [id(DISPID_IHTMLELEMENT3_DRAGDROP)] VARIANT_BOOL dragDrop();
    [propget, id(DISPID_IHTMLELEMENT3_GLYPHMODE), hidden, restricted, nonbrowsable] LONG glyphMode();
    [propput, id(DISPID_IHTMLELEMENT4_ONMOUSEWHEEL), displaybind, bindable] void onmousewheel(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT4_ONMOUSEWHEEL), displaybind, bindable] VARIANT onmousewheel();
    [id(DISPID_IHTMLELEMENT4_NORMALIZE)] void normalize();
    [id(DISPID_IHTMLELEMENT4_GETATTRIBUTENODE)] IHTMLDOMAttribute* getAttributeNode([in] BSTR bstrname);
    [id(DISPID_IHTMLELEMENT4_SETATTRIBUTENODE)] IHTMLDOMAttribute* setAttributeNode([in] IHTMLDOMAttribute* pattr);
    [id(DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE)] IHTMLDOMAttribute* removeAttributeNode([in] IHTMLDOMAttribute* pattr);
    [propput, id(DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE), displaybind, bindable] void onbeforeactivate(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE), displaybind, bindable] VARIANT onbeforeactivate();
    [propput, id(DISPID_IHTMLELEMENT4_ONFOCUSIN), displaybind, bindable] void onfocusin(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT4_ONFOCUSIN), displaybind, bindable] VARIANT onfocusin();
    [propput, id(DISPID_IHTMLELEMENT4_ONFOCUSOUT), displaybind, bindable] void onfocusout(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT4_ONFOCUSOUT), displaybind, bindable] VARIANT onfocusout();
    [propget, id(DISPID_IHTMLUNIQUENAME_UNIQUENUMBER), hidden] long uniqueNumber();
    [propget, id(DISPID_IHTMLUNIQUENAME_UNIQUEID), hidden] BSTR uniqueID();
    [propget, id(DISPID_IHTMLDOMNODE_NODETYPE)] long nodeType();
    [propget, id(DISPID_IHTMLDOMNODE_PARENTNODE)] IHTMLDOMNode* parentNode();
    [id(DISPID_IHTMLDOMNODE_HASCHILDNODES)] VARIANT_BOOL hasChildNodes();
    [propget, id(DISPID_IHTMLDOMNODE_CHILDNODES)] IDispatch* childNodes();
    [propget, id(DISPID_IHTMLDOMNODE_ATTRIBUTES)] IDispatch* attributes();
    [id(DISPID_IHTMLDOMNODE_INSERTBEFORE)] IHTMLDOMNode* insertBefore([in] IHTMLDOMNode* newChild,[optional, in] VARIANT refChild);
    [id(DISPID_IHTMLDOMNODE_REMOVECHILD)] IHTMLDOMNode* removeChild([in] IHTMLDOMNode* oldChild);
    [id(DISPID_IHTMLDOMNODE_REPLACECHILD)] IHTMLDOMNode* replaceChild([in] IHTMLDOMNode* newChild,[in] IHTMLDOMNode* oldChild);
    [id(DISPID_IHTMLDOMNODE_CLONENODE)] IHTMLDOMNode* cloneNode([in] VARIANT_BOOL fDeep);
    [id(DISPID_IHTMLDOMNODE_REMOVENODE)] IHTMLDOMNode* removeNode([defaultvalue(0), in] VARIANT_BOOL fDeep);
    [id(DISPID_IHTMLDOMNODE_SWAPNODE)] IHTMLDOMNode* swapNode([in] IHTMLDOMNode* otherNode);
    [id(DISPID_IHTMLDOMNODE_REPLACENODE)] IHTMLDOMNode* replaceNode([in] IHTMLDOMNode* replacement);
    [id(DISPID_IHTMLDOMNODE_APPENDCHILD)] IHTMLDOMNode* appendChild([in] IHTMLDOMNode* newChild);
    [propget, id(DISPID_IHTMLDOMNODE_NODENAME)] BSTR nodeName();
    [propput, id(DISPID_IHTMLDOMNODE_NODEVALUE)] void nodeValue(VARIANT v);
    [propget, id(DISPID_IHTMLDOMNODE_NODEVALUE)] VARIANT nodeValue();
    [propget, id(DISPID_IHTMLDOMNODE_FIRSTCHILD)] IHTMLDOMNode* firstChild();
    [propget, id(DISPID_IHTMLDOMNODE_LASTCHILD)] IHTMLDOMNode* lastChild();
    [propget, id(DISPID_IHTMLDOMNODE_PREVIOUSSIBLING)] IHTMLDOMNode* previousSibling();
    [propget, id(DISPID_IHTMLDOMNODE_NEXTSIBLING)] IHTMLDOMNode* nextSibling();
    [propget, id(DISPID_IHTMLDOMNODE2_OWNERDOCUMENT)] IDispatch* ownerDocument();
    [propput, id(DISPID_IHTMLDOMNODE3_PREFIX)] void prefix(VARIANT v);
    [propget, id(DISPID_IHTMLDOMNODE3_PREFIX)] VARIANT prefix();
    [propget, id(DISPID_IHTMLDOMNODE3_LOCALNAME)] VARIANT localName();
    [propget, id(DISPID_IHTMLDOMNODE3_NAMESPACEURI)] VARIANT namespaceURI();
    [propput, id(DISPID_IHTMLDOMNODE3_TEXTCONTENT)] void textContent(VARIANT v);
    [propget, id(DISPID_IHTMLDOMNODE3_TEXTCONTENT)] VARIANT textContent();
    [id(DISPID_IHTMLDOMNODE3_ISEQUALNODE)] VARIANT_BOOL isEqualNode([in] IHTMLDOMNode3* otherNode);
    [id(DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI)] VARIANT lookupNamespaceURI([in] VARIANT* pvarPrefix);
    [id(DISPID_IHTMLDOMNODE3_LOOKUPPREFIX)] VARIANT lookupPrefix([in] VARIANT* pvarNamespaceURI);
    [id(DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE)] VARIANT_BOOL isDefaultNamespace([in] VARIANT* pvarNamespace);
    [id(DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD)] IHTMLDOMNode* ie9_appendChild([in] IHTMLDOMNode* newChild);
    [id(DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE)] IHTMLDOMNode* ie9_insertBefore([in] IHTMLDOMNode* newChild,[optional, in] VARIANT refChild);
    [id(DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD)] IHTMLDOMNode* ie9_removeChild([in] IHTMLDOMNode* oldChild);
    [id(DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD)] IHTMLDOMNode* ie9_replaceChild([in] IHTMLDOMNode* newChild,[in] IHTMLDOMNode* oldChild);
    [id(DISPID_IHTMLDOMNODE3_ISSAMENODE)] VARIANT_BOOL isSameNode([in] IHTMLDOMNode3* otherNode);
    [id(DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION)] USHORT compareDocumentPosition([in] IHTMLDOMNode* otherNode);
    [id(DISPID_IHTMLDOMNODE3_ISSUPPORTED)] VARIANT_BOOL isSupported([in] BSTR feature,[in] VARIANT version);
    [propput, id(DISPID_IHTMLDATABINDING_DATAFLD)] void dataFld(BSTR v);
    [propget, id(DISPID_IHTMLDATABINDING_DATAFLD)] BSTR dataFld();
    [propput, id(DISPID_IHTMLDATABINDING_DATASRC)] void dataSrc(BSTR v);
    [propget, id(DISPID_IHTMLDATABINDING_DATASRC)] BSTR dataSrc();
    [propput, id(DISPID_IHTMLDATABINDING_DATAFORMATAS)] void dataFormatAs(BSTR v);
    [propget, id(DISPID_IHTMLDATABINDING_DATAFORMATAS)] BSTR dataFormatAs();
    [id(DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE)] IHTMLDOMAttribute2* ie8_getAttributeNode([in] BSTR bstrname);
    [id(DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE)] IHTMLDOMAttribute2* ie8_setAttributeNode([in] IHTMLDOMAttribute2* pattr);
    [id(DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE)] IHTMLDOMAttribute2* ie8_removeAttributeNode([in] IHTMLDOMAttribute2* pattr);
    [id(DISPID_IHTMLELEMENT5_HASATTRIBUTE)] VARIANT_BOOL hasAttribute([in] BSTR name);
    [propput, id(DISPID_IHTMLELEMENT5_ROLE), displaybind, bindable] void role(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ROLE), displaybind, bindable] BSTR role();
    [propput, id(DISPID_IHTMLELEMENT5_ARIABUSY), displaybind, bindable] void ariaBusy(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIABUSY), displaybind, bindable] BSTR ariaBusy();
    [propput, id(DISPID_IHTMLELEMENT5_ARIACHECKED), displaybind, bindable] void ariaChecked(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIACHECKED), displaybind, bindable] BSTR ariaChecked();
    [propput, id(DISPID_IHTMLELEMENT5_ARIADISABLED), displaybind, bindable] void ariaDisabled(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIADISABLED), displaybind, bindable] BSTR ariaDisabled();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAEXPANDED), displaybind, bindable] void ariaExpanded(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAEXPANDED), displaybind, bindable] BSTR ariaExpanded();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAHASPOPUP), displaybind, bindable] void ariaHaspopup(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAHASPOPUP), displaybind, bindable] BSTR ariaHaspopup();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAHIDDEN), displaybind, bindable] void ariaHidden(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAHIDDEN), displaybind, bindable] BSTR ariaHidden();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAINVALID), displaybind, bindable] void ariaInvalid(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAINVALID), displaybind, bindable] BSTR ariaInvalid();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE), displaybind, bindable] void ariaMultiselectable(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE), displaybind, bindable] BSTR ariaMultiselectable();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAPRESSED), displaybind, bindable] void ariaPressed(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAPRESSED), displaybind, bindable] BSTR ariaPressed();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAREADONLY), displaybind, bindable] void ariaReadonly(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAREADONLY), displaybind, bindable] BSTR ariaReadonly();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAREQUIRED), displaybind, bindable] void ariaRequired(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAREQUIRED), displaybind, bindable] BSTR ariaRequired();
    [propput, id(DISPID_IHTMLELEMENT5_ARIASECRET), displaybind, bindable] void ariaSecret(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIASECRET), displaybind, bindable] BSTR ariaSecret();
    [propput, id(DISPID_IHTMLELEMENT5_ARIASELECTED), displaybind, bindable] void ariaSelected(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIASELECTED), displaybind, bindable] BSTR ariaSelected();
    [id(DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE)] VARIANT ie8_getAttribute([in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE)] void ie8_setAttribute([in] BSTR strAttributeName,[in] VARIANT AttributeValue);
    [id(DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE)] VARIANT_BOOL ie8_removeAttribute([in] BSTR strAttributeName);
    [propget, id(DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES)] IHTMLAttributeCollection3* ie8_attributes();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAVALUENOW), displaybind, bindable] void ariaValuenow(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAVALUENOW), displaybind, bindable] BSTR ariaValuenow();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAPOSINSET), displaybind, bindable] void ariaPosinset(short v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAPOSINSET), displaybind, bindable] short ariaPosinset();
    [propput, id(DISPID_IHTMLELEMENT5_ARIASETSIZE), displaybind, bindable] void ariaSetsize(short v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIASETSIZE), displaybind, bindable] short ariaSetsize();
    [propput, id(DISPID_IHTMLELEMENT5_ARIALEVEL), displaybind, bindable] void ariaLevel(short v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIALEVEL), displaybind, bindable] short ariaLevel();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAVALUEMIN), displaybind, bindable] void ariaValuemin(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAVALUEMIN), displaybind, bindable] BSTR ariaValuemin();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAVALUEMAX), displaybind, bindable] void ariaValuemax(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAVALUEMAX), displaybind, bindable] BSTR ariaValuemax();
    [propput, id(DISPID_IHTMLELEMENT5_ARIACONTROLS), displaybind, bindable] void ariaControls(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIACONTROLS), displaybind, bindable] BSTR ariaControls();
    [propput, id(DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY), displaybind, bindable] void ariaDescribedby(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY), displaybind, bindable] BSTR ariaDescribedby();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAFLOWTO), displaybind, bindable] void ariaFlowto(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAFLOWTO), displaybind, bindable] BSTR ariaFlowto();
    [propput, id(DISPID_IHTMLELEMENT5_ARIALABELLEDBY), displaybind, bindable] void ariaLabelledby(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIALABELLEDBY), displaybind, bindable] BSTR ariaLabelledby();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT), displaybind, bindable] void ariaActivedescendant(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT), displaybind, bindable] BSTR ariaActivedescendant();
    [propput, id(DISPID_IHTMLELEMENT5_ARIAOWNS), displaybind, bindable] void ariaOwns(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIAOWNS), displaybind, bindable] BSTR ariaOwns();
    [id(DISPID_IHTMLELEMENT5_HASATTRIBUTES)] VARIANT_BOOL hasAttributes();
    [propput, id(DISPID_IHTMLELEMENT5_ARIALIVE), displaybind, bindable] void ariaLive(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIALIVE), displaybind, bindable] BSTR ariaLive();
    [propput, id(DISPID_IHTMLELEMENT5_ARIARELEVANT), displaybind, bindable] void ariaRelevant(BSTR v);
    [propget, id(DISPID_IHTMLELEMENT5_ARIARELEVANT), displaybind, bindable] BSTR ariaRelevant();
    [id(DISPID_IHTMLELEMENT6_GETATTRIBUTENS)] VARIANT getAttributeNS([in] VARIANT* pvarNS,[in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT6_SETATTRIBUTENS)] void setAttributeNS([in] VARIANT* pvarNS,[in] BSTR strAttributeName,[in] VARIANT* pvarAttributeValue);
    [id(DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS)] void removeAttributeNS([in] VARIANT* pvarNS,[in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS)] IHTMLDOMAttribute2* getAttributeNodeNS([in] VARIANT* pvarNS,[in] BSTR bstrname);
    [id(DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS)] IHTMLDOMAttribute2* setAttributeNodeNS([in] IHTMLDOMAttribute2* pattr);
    [id(DISPID_IHTMLELEMENT6_HASATTRIBUTENS)] VARIANT_BOOL hasAttributeNS([in] VARIANT* pvarNS,[in] BSTR name);
    [id(DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE)] VARIANT ie9_getAttribute([in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE)] void ie9_setAttribute([in] BSTR strAttributeName,[in] VARIANT* pvarAttributeValue);
    [id(DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE)] void ie9_removeAttribute([in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE)] IHTMLDOMAttribute2* ie9_getAttributeNode([in] BSTR strAttributeName);
    [id(DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE)] IHTMLDOMAttribute2* ie9_setAttributeNode([in] IHTMLDOMAttribute2* pattr);
    [id(DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE)] IHTMLDOMAttribute2* ie9_removeAttributeNode([in] IHTMLDOMAttribute2* pattr);
    [id(DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE)] VARIANT_BOOL ie9_hasAttribute([in] BSTR name);
    [id(DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS)] IHTMLElementCollection* getElementsByTagNameNS([in] VARIANT* varNS,[in] BSTR bstrLocalName);
    [propget, id(DISPID_IHTMLELEMENT6_IE9_TAGNAME)] BSTR ie9_tagName();
    [propget, id(DISPID_IHTMLELEMENT6_IE9_NODENAME)] BSTR ie9_nodeName();
    [id(DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME)] IHTMLElementCollection* getElementsByClassName([in] BSTR v);
    [id(DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR)] VARIANT_BOOL msMatchesSelector([in] BSTR v);
    [propput, id(DISPID_IHTMLELEMENT6_ONABORT), displaybind, bindable] void onabort(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONABORT), displaybind, bindable] VARIANT onabort();
    [propput, id(DISPID_IHTMLELEMENT6_ONCANPLAY), displaybind, bindable, hidden] void oncanplay(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONCANPLAY), displaybind, bindable, hidden] VARIANT oncanplay();
    [propput, id(DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH), displaybind, bindable, hidden] void oncanplaythrough(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH), displaybind, bindable, hidden] VARIANT oncanplaythrough();
    [propput, id(DISPID_IHTMLELEMENT6_ONCHANGE), displaybind, bindable] void onchange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONCHANGE), displaybind, bindable] VARIANT onchange();
    [propput, id(DISPID_IHTMLELEMENT6_ONDURATIONCHANGE), displaybind, bindable, hidden] void ondurationchange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONDURATIONCHANGE), displaybind, bindable, hidden] VARIANT ondurationchange();
    [propput, id(DISPID_IHTMLELEMENT6_ONEMPTIED), displaybind, bindable, hidden] void onemptied(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONEMPTIED), displaybind, bindable, hidden] VARIANT onemptied();
    [propput, id(DISPID_IHTMLELEMENT6_ONENDED), displaybind, bindable, hidden] void onended(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONENDED), displaybind, bindable, hidden] VARIANT onended();
    [propput, id(DISPID_IHTMLELEMENT6_ONERROR), displaybind, bindable] void onerror(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONERROR), displaybind, bindable] VARIANT onerror();
    [propput, id(DISPID_IHTMLELEMENT6_ONINPUT), displaybind, bindable, hidden] void oninput(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONINPUT), displaybind, bindable, hidden] VARIANT oninput();
    [propput, id(DISPID_IHTMLELEMENT6_ONLOAD), displaybind, bindable] void onload(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONLOAD), displaybind, bindable] VARIANT onload();
    [propput, id(DISPID_IHTMLELEMENT6_ONLOADEDDATA), displaybind, bindable, hidden] void onloadeddata(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONLOADEDDATA), displaybind, bindable, hidden] VARIANT onloadeddata();
    [propput, id(DISPID_IHTMLELEMENT6_ONLOADEDMETADATA), displaybind, bindable, hidden] void onloadedmetadata(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONLOADEDMETADATA), displaybind, bindable, hidden] VARIANT onloadedmetadata();
    [propput, id(DISPID_IHTMLELEMENT6_ONLOADSTART), displaybind, bindable, hidden] void onloadstart(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONLOADSTART), displaybind, bindable, hidden] VARIANT onloadstart();
    [propput, id(DISPID_IHTMLELEMENT6_ONPAUSE), displaybind, bindable, hidden] void onpause(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONPAUSE), displaybind, bindable, hidden] VARIANT onpause();
    [propput, id(DISPID_IHTMLELEMENT6_ONPLAY), displaybind, bindable, hidden] void onplay(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONPLAY), displaybind, bindable, hidden] VARIANT onplay();
    [propput, id(DISPID_IHTMLELEMENT6_ONPLAYING), displaybind, bindable, hidden] void onplaying(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONPLAYING), displaybind, bindable, hidden] VARIANT onplaying();
    [propput, id(DISPID_IHTMLELEMENT6_ONPROGRESS), displaybind, bindable, hidden] void onprogress(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONPROGRESS), displaybind, bindable, hidden] VARIANT onprogress();
    [propput, id(DISPID_IHTMLELEMENT6_ONRATECHANGE), displaybind, bindable, hidden] void onratechange(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONRATECHANGE), displaybind, bindable, hidden] VARIANT onratechange();
    [propput, id(DISPID_IHTMLELEMENT6_ONRESET), displaybind, bindable] void onreset(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONRESET), displaybind, bindable] VARIANT onreset();
    [propput, id(DISPID_IHTMLELEMENT6_ONSEEKED), displaybind, bindable, hidden] void onseeked(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONSEEKED), displaybind, bindable, hidden] VARIANT onseeked();
    [propput, id(DISPID_IHTMLELEMENT6_ONSEEKING), displaybind, bindable, hidden] void onseeking(VARIANT v);
    [propget, id(DISPID_IHTMLELEMENT6_ONSEEKING), displaybind, bindable, hidden] VARIANT onseeking();
    [propput, id(DISPID_IHTMLELEMENT6_ONSELECT), displaybi